package scutil.lang

trait assocGenerated extends assocBase {
	//--------------------------------------------------------------------------------
	// type

	type Arrowed1[T1]	= T1

	[2..#type Arrowed1[[#T1#]] = ([#T1# -> ])#
	]

	//------------------------------------------------------------------------------
	// arrowed

	def arrow1[T1](it:(T1)):(T1)	= it

	[2..#def arrow1[[#T1#]](it:([#T1#])):([#T1# -> ])	=
		[#it._1# -> ]#
	]

	//------------------------------------------------------------------------------
	// unarrowed

	def unarrow1[T1](it:(T1)):(T1)	= it

	[2..#def unarrow1[[#T1#]](it:([#T1# -> ])):([#T1#])	=
		it match { case ([#t1# -> ]) => ([#t1#]) }#
	]
}
