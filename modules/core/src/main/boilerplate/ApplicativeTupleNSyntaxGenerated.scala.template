package scutil.lang.tc

trait ApplicativeTupleNSyntaxGenerated {
	[2..#implicit final class ApplicativeTuple1Syntax[F[_],[#S1#]](items:([#F[S1]#])) {
		def zipN(implicit F:Applicative[F]):F[([#S1#])]	=
			mapN { ([#s1#]) => ([#s1#]) }
		def mapN[T](func:([#S1#])=>T)(implicit F:Applicative[F]):F[T]	= {
			[1..1#val f0	= func.curried
			val f1	= (F map	items._1)(f0)#]
			[2..#val f1	= F.ap(f0)(items._1)#
			]
			f1
		}
	}#

	]
}
